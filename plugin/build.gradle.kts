import java.util.Properties

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.13/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.plugin.publish)
//    signing
}

group = "io.github.dosukoi-juku"
version = "0.0.1-SNAPSHOT"

repositories {
    // Use Maven Central for resolving dependencies.
    google()
    mavenCentral()
}

dependencies {
    implementation(libs.bundles.agp)
    implementation(libs.protobuf)
    implementation(libs.kotlin.serialization.json)
    implementation(libs.xmlutil.serialization)
    implementation(libs.model.builder)

    testImplementation(libs.kotlin.test.junit5)
    testImplementation(libs.mockk)

    testRuntimeOnly(libs.junit.platform.launcher)
}

gradlePlugin {
    plugins {
        create("plugin") {
            id = "io.github.dosukoi-juku.license-report"
            group = "io.github.dosukoi-juku.license-report"
            displayName = "License Report"
            description = "A plugin that generates third-party licenses for Android projects."
            implementationClass = "io.github.dosukoi_juku.license.report.LicensesPlugin"
        }
    }
}


publishing {
    publications {
        withType<MavenPublication> {
            artifactId = "gradle-plugin"
        }
    }
    repositories {
        maven {
            name = "localPluginRepository"
            url = uri("../repo")
        }
//        maven {
//            name = "GitHubPackages"
//            url = uri("https://maven.pkg.github.com/dosukoi-juku/licenses-plugin")
//            credentials {
//                val properties = Properties()
//                properties.load(project.rootProject.file("local.properties").inputStream())
//                username = properties.getProperty("github.username")
//                password = properties.getProperty("github.token")
//            }
//        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

//signing {
//    useInMemoryPgpKeys(
//        providers.gradleProperty("gpg.signing.key").orNull,
//        providers.gradleProperty("gpg.signing.passphrase").orNull
//    )
//}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])
configurations["functionalTestRuntimeOnly"].extendsFrom(configurations["testRuntimeOnly"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

tasks.named<Task>("check") {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
